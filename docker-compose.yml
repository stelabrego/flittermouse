# make sure to stop postgres running directly in your OS
# docker-compose up -d --build
# docker-compose logs
# docker-compose stop
# docker-compose rm
# fish:
# function dcrb
#     docker-compose stop && docker-compose rm -f && docker-compose up -d --build
#     sleep 3
#     docker-compose logs
# end
version: '3.7'
services:
 
  db:
    container_name: db
    image: postgres
    restart: always
    volumes:
      - './deploy/postgres:/docker-entrypoint-initdb.d'
      - '~/flittermouse-data:/var/lib/postgresql/data'
    env_file: ~/.environments/flittermouse/db.env
    expose:
      - 5432
    ports:
      - '5432:5432' # only here for adminer and development
  
        
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    environment:
      ADMINER_DESIGN: mvt
    ports:
      - "8080:8080"

  app:
    container_name: app
    build:
      context: .
      dockerfile: app.Dockerfile
    expose:
      - 3000
    links:
      - db
      - cache
    env_file: ~/.environments/flittermouse/app.env
    environment:
      - LETSENCRYPT_HOST=flittermouse.io,www.flittermouse.io


  cache:
    image: redis
    container_name: cache
    expose:
      - 6379
    environment:
      - NETWORK_ACCESS=internal
  
  nginx:
    image: jwilder/nginx-proxy
    container_name: nginx
    environment:
      - DEFAULT_HOST=flittermouse.io
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=443
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - type: volume
        source: certs
        target: /etc/nginx/certs
      - type: volume
        source: vhost
        target: /etc/nginx/vhost.d
      - type: volume
        source: html
        target: /usr/share/nginx/html


  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    environment:
      - DEFAULT_EMAIL=stelabrego@icloud.com
      - NGINX_PROXY_CONTAINER=nginx
      - DEBUG=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: volume
        source: certs
        target: /etc/nginx/certs
      - type: volume
        source: vhost
        target: /etc/nginx/vhost.d
      - type: volume
        source: html
        target: /usr/share/nginx/html

volumes:
  certs:
  vhost:
  html:

  
      